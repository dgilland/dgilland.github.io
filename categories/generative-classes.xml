<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Derrick Gilland (generative-classes)</title><link>http://derrickgilland.com/</link><description></description><atom:link href="http://derrickgilland.com/categories/generative-classes.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 07 Jul 2016 20:20:13 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Reinitializing Chained Method Values in Python</title><link>http://derrickgilland.com/posts/reinitializing-chained-method-values-in-python/</link><dc:creator>Derrick Gilland</dc:creator><description>&lt;div&gt;&lt;p&gt;This is part four in my series on &lt;a class="reference external" href="http://derrickgilland.com/categories/generative-classes/"&gt;Generative Classes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In part three of this series, &lt;a class="reference external" href="http://derrickgilland.com/posts/late-value-passing-for-lazy-method-chaining-in-python"&gt;Late Value Passing for Lazy Method Chaining in Python&lt;/a&gt;, I covered a methodology for creating reusable, ad-hoc functions from chained methods by passing the initial chain value late (i.e. after the method chain had been built up). In this post I will outline a way to replace the initial chain value by returning a clone of the method chains reinitialized with the replacement value.&lt;/p&gt;
&lt;p&gt;The example code I will use to discuss this type of functionality can be found in &lt;a class="reference external" href="http://pydash.readthedocs.org/en/latest/"&gt;pydash's&lt;/a&gt; &lt;a class="reference external" href="https://github.com/dgilland/pydash/blob/e7890117f3184dbe5bd7deb09a5eaf217180cb0a/pydash/chaining.py"&gt;chaining submodule&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://derrickgilland.com/posts/reinitializing-chained-method-values-in-python/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>generative-classes</category><category>python</category><guid>http://derrickgilland.com/posts/reinitializing-chained-method-values-in-python/</guid><pubDate>Thu, 30 Apr 2015 23:15:23 GMT</pubDate></item><item><title>Late Value Passing for Lazy Method Chaining in Python</title><link>http://derrickgilland.com/posts/late-value-passing-for-lazy-method-chaining-in-python/</link><dc:creator>Derrick Gilland</dc:creator><description>&lt;div&gt;&lt;p&gt;This is part three in my series on &lt;a class="reference external" href="http://derrickgilland.com/categories/generative-classes/"&gt;Generative Classes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In part two of this series, &lt;a class="reference external" href="http://derrickgilland.com/posts/lazy-method-chaining-in-python"&gt;Lazy Method Chaining in Python&lt;/a&gt;, I showed an example of how to implement lazy method chaining. In this post I will build upon that implementation by building support for a way to pass the seed value of the lazy method chain late, i.e., at the end of the chain instead of at the beginning. This will then allow us to easily create reusable ad-hoc functions from chained methods.&lt;/p&gt;
&lt;p&gt;The example code I will use to discuss this type of functionality can be found in &lt;a class="reference external" href="http://pydash.readthedocs.org/en/latest/"&gt;pydash's&lt;/a&gt; &lt;a class="reference external" href="https://github.com/dgilland/pydash/blob/44ff5f94870be48908c8b1eb1623559b88164dad/pydash/chaining.py"&gt;chaining submodule&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://derrickgilland.com/posts/late-value-passing-for-lazy-method-chaining-in-python/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>generative-classes</category><category>pydash</category><category>python</category><guid>http://derrickgilland.com/posts/late-value-passing-for-lazy-method-chaining-in-python/</guid><pubDate>Wed, 18 Mar 2015 21:43:34 GMT</pubDate></item><item><title>Lazy Method Chaining in Python</title><link>http://derrickgilland.com/posts/lazy-method-chaining-in-python/</link><dc:creator>Derrick Gilland</dc:creator><description>&lt;div&gt;&lt;p&gt;This is part two in my series on &lt;a class="reference external" href="http://derrickgilland.com/categories/generative-classes/"&gt;Generative Classes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Building upon my previous post, &lt;a class="reference external" href="http://derrickgilland.com/posts/introduction-to-generative-classes-in-python"&gt;Introduction to Generative Classes in Python&lt;/a&gt;, I'd like to explore how to implement lazy method chaining where execution of each method is deferred until explicitly called.&lt;/p&gt;
&lt;p&gt;The example code I will use to discuss this type of functionality can be found in &lt;a class="reference external" href="http://pydash.readthedocs.org/en/latest/"&gt;pydash's&lt;/a&gt; &lt;a class="reference external" href="https://github.com/dgilland/pydash/blob/238edf01805eee678263cedcfa807a88f9310d3a/pydash/chaining.py"&gt;chaining submodule&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://derrickgilland.com/posts/lazy-method-chaining-in-python/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>generative-classes</category><category>pydash</category><category>python</category><guid>http://derrickgilland.com/posts/lazy-method-chaining-in-python/</guid><pubDate>Wed, 04 Feb 2015 03:15:07 GMT</pubDate></item><item><title>Introduction to Generative Classes in Python</title><link>http://derrickgilland.com/posts/introduction-to-generative-classes-in-python/</link><dc:creator>Derrick Gilland</dc:creator><description>&lt;div&gt;&lt;p&gt;This is part one in my series on &lt;a class="reference external" href="http://derrickgilland.com/categories/generative-classes/"&gt;Generative Classes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A Python Generative Class is defined as&lt;/p&gt;
&lt;blockquote&gt;
a class that returns or clones, i.e. generates, itself when accessed by certain means&lt;/blockquote&gt;
&lt;p&gt;This type of class can be used to implement method chaining or to mutate an object's state without modifying the original class instance.&lt;/p&gt;
&lt;p&gt;An example of a generative class would be one that supports method chaining:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://derrickgilland.com/posts/introduction-to-generative-classes-in-python/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>generative-classes</category><category>python</category><guid>http://derrickgilland.com/posts/introduction-to-generative-classes-in-python/</guid><pubDate>Tue, 20 Jan 2015 23:17:18 GMT</pubDate></item></channel></rss>